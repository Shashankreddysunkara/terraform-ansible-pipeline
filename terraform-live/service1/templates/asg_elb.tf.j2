######
# Launch configuration and autoscaling group
######

module "autoscaling" {
  source  = "{{ item_ans_tf_services.aws_asg_module_source }}"
  version = "{{ item_ans_tf_services.aws_asg_module_version }}"

  name = "{{ans_environment}}-{{ans_app_name}}-webserver"

  lc_name = "{{ans_environment}}-{{ans_app_name}}-lc"

  image_id                    = "${data.aws_ami.amazon_linux.id}"
  key_name                    = "{{ item_ans_tf_services.aws_asg_key_name }}"
  instance_type               = "{{ item_ans_tf_services.aws_asg_instance_type }}"
  user_data                   = <<-EOF
				#!/bin/bash
				yum install -y nginx 
				service nginx start
				EOF
  security_groups             = ["${module.security-group-app.this_security_group_id}"]
  associate_public_ip_address = "{{ item_ans_tf_services.aws_asg_associate_public_ip_address }}"
  load_balancers = ["${module.elb.this_elb_id}"]

  ebs_block_device = [
    {
      device_name           = "{{ item_ans_tf_services.aws_asg_ebs_block_device_name }}"
      volume_type           = "{{ item_ans_tf_services.aws_asg_ebs_block_volume_type }}"
      volume_size           = "{{ item_ans_tf_services.aws_asg_ebs_block_volume_size }}"
      delete_on_termination = "{{ item_ans_tf_services.aws_asg_ebs_block_delete_on_termination }}"
    },
  ]

  root_block_device = [
    {
      volume_size           = "{{ item_ans_tf_services.aws_asg_ebs_root_volume_size }}"
      volume_type           = "{{ item_ans_tf_services.aws_asg_ebs_root_volume_type }}"
      delete_on_termination = "{{ item_ans_tf_services.aws_asg_ebs_root_delete_on_termination }}"
    },
  ]

  # Auto scaling group
  asg_name                  = "{{ans_environment}}-{{ans_app_name}}-asg"
  vpc_zone_identifier       = ["${module.vpc.private_subnets}"]
  health_check_type         = "EC2"
  min_size                  = {{ item_ans_tf_services.aws_asg_min_size }}
  max_size                  = {{ item_ans_tf_services.aws_asg_max_size }}
  desired_capacity          = {{ item_ans_tf_services.aws_asg_desired_capacity }}
  wait_for_capacity_timeout = {{ item_ans_tf_services.aws_asg_wait_for_capacity_timeout }}

  tags = [
    {
      key                 = "Environment"
      value               = "{{ ans_aws_tag_environment }}"
      propagate_at_launch = true
    },
    {
      key                 = "owner"
      value               = "{{ ans_aws_tag_owner }}"
      propagate_at_launch = true
    },
  ]
}
